{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\Components\\\\Header\\\\SortButton.tsx\";\nimport React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setDesc, setSort } from \"../../actions\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport { Paper } from \"@material-ui/core\";\nimport sortBy from \"../../App\"; // Knapp som oppdaterer hva kategori vi sorterer etter og hvilken retning vi sorterer i\n\nfunction SortButton(props) {\n  // Nødvendig for redux\n  const dispatch = useDispatch(); // Definerer om knappen er trykket basert på om filteret i redux state er likt som navnet til denne knappen\n\n  const active = useSelector(state => state.filter.sort) === props.sort; // Bestemmer rentning basert på filter i state\n\n  const desc = useSelector(state => state.filter.desc); // Håndterer trykk på knapp, endrer filter i state basert på tittel og retning\n\n  function toggleSort() {\n    if (active) {\n      // Hvis aktiv, bare bytt retning\n      dispatch(setDesc(!desc));\n    } else {\n      // Hvis ikke aktiv, sett sort i state og set descending til true\n      dispatch(setSort(props.sort));\n      dispatch(setDesc(true));\n    }\n\n    props.refresh();\n  }\n\n  const classes = makeStyles({\n    div: {\n      display: 'flex',\n      flexDirection: props.mobile ? 'column' : 'row',\n      alignItems: 'center',\n      textAlign: 'center',\n      backgroundColor: 'rgb(200, 200, 200, 0.5)',\n      borderRadius: '5px',\n      cursor: 'pointer',\n      width: 1 / sortBy.length * 100 - 5 + '%',\n      margin: '10px',\n      height: '100%'\n    },\n    sortTitle: {\n      color: active ? '#E98074' : '#D1D1D1',\n      width: '100%',\n      margin: 0,\n      paddingTop: props.mobile ? '40px' : '7px'\n    },\n    arrow: {\n      color: active ? \"#E98074\" : \"#D1D1D1\"\n    }\n  });\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes().div,\n    \"data-testid\": \"sortbutton\" + props.nummer,\n    id: \"sortbutton\" + props.nummer,\n    onClick: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, props.mobile ? /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes().sortTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }, props.sort) : null, active ? desc ? /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, {\n    className: classes().arrow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(KeyboardArrowUpIcon, {\n    className: classes().arrow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(KeyboardArrowLeftIcon, {\n    className: classes().arrow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), !props.mobile ? /*#__PURE__*/React.createElement(\"h3\", {\n    className: classes().sortTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 30\n    }\n  }, props.sort) : null);\n}\n\nexport default SortButton;","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/Components/Header/SortButton.tsx"],"names":["React","useDispatch","useSelector","setDesc","setSort","makeStyles","KeyboardArrowDownIcon","KeyboardArrowUpIcon","KeyboardArrowLeftIcon","Paper","sortBy","SortButton","props","dispatch","active","state","filter","sort","desc","toggleSort","refresh","classes","div","display","flexDirection","mobile","alignItems","textAlign","backgroundColor","borderRadius","cursor","width","length","margin","height","sortTitle","color","paddingTop","arrow","nummer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,OAAR,EAAiBC,OAAjB,QAA+B,eAA/B;AAEA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,SAAQC,KAAR,QAAoB,mBAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAEA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAAmG;AAE/F;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B,CAH+F,CAK/F;;AACA,QAAMa,MAAM,GAAGZ,WAAW,CAAEa,KAAD,IAAkBA,KAAK,CAACC,MAAN,CAAaC,IAAhC,CAAX,KAAqDL,KAAK,CAACK,IAA1E,CAN+F,CAO/F;;AACA,QAAMC,IAAI,GAAGhB,WAAW,CAAEa,KAAD,IAAkBA,KAAK,CAACC,MAAN,CAAaE,IAAhC,CAAxB,CAR+F,CAU/F;;AACA,WAASC,UAAT,GAAsB;AAClB,QAAIL,MAAJ,EAAY;AACR;AACAD,MAAAA,QAAQ,CAACV,OAAO,CAAC,CAACe,IAAF,CAAR,CAAR;AACH,KAHD,MAGO;AACH;AACAL,MAAAA,QAAQ,CAACT,OAAO,CAACQ,KAAK,CAACK,IAAP,CAAR,CAAR;AACAJ,MAAAA,QAAQ,CAACV,OAAO,CAAC,IAAD,CAAR,CAAR;AACH;;AACDS,IAAAA,KAAK,CAACQ,OAAN;AACH;;AAED,QAAMC,OAAO,GAAGhB,UAAU,CAAC;AACvBiB,IAAAA,GAAG,EAAE;AACDC,MAAAA,OAAO,EAAE,MADR;AAEDC,MAAAA,aAAa,EAAEZ,KAAK,CAACa,MAAN,GAAe,QAAf,GAA0B,KAFxC;AAGDC,MAAAA,UAAU,EAAE,QAHX;AAIDC,MAAAA,SAAS,EAAE,QAJV;AAKDC,MAAAA,eAAe,EAAE,yBALhB;AAMDC,MAAAA,YAAY,EAAE,KANb;AAODC,MAAAA,MAAM,EAAE,SAPP;AAQDC,MAAAA,KAAK,EAAG,IAAIrB,MAAM,CAACsB,MAAZ,GAAsB,GAAtB,GAA4B,CAA5B,GAAgC,GARtC;AASDC,MAAAA,MAAM,EAAE,MATP;AAUDC,MAAAA,MAAM,EAAE;AAVP,KADkB;AAavBC,IAAAA,SAAS,EAAE;AACPC,MAAAA,KAAK,EAAEtB,MAAM,GAAG,SAAH,GAAe,SADrB;AAEPiB,MAAAA,KAAK,EAAE,MAFA;AAGPE,MAAAA,MAAM,EAAE,CAHD;AAIPI,MAAAA,UAAU,EAAEzB,KAAK,CAACa,MAAN,GAAe,MAAf,GAAwB;AAJ7B,KAbY;AAmBvBa,IAAAA,KAAK,EAAE;AACHF,MAAAA,KAAK,EAAGtB,MAAM,GAAG,SAAH,GAAe;AAD1B;AAnBgB,GAAD,CAA1B;AAwBA,sBACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEO,OAAO,GAAGC,GAA5B;AAAiC,mBAAa,eAAeV,KAAK,CAAC2B,MAAnE;AAA2E,IAAA,EAAE,EAAE,eAAe3B,KAAK,CAAC2B,MAApG;AACO,IAAA,OAAO,EAAEpB,UADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKP,KAAK,CAACa,MAAN,gBAAe;AAAI,IAAA,SAAS,EAAEJ,OAAO,GAAGc,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCvB,KAAK,CAACK,IAA3C,CAAf,GAAuE,IAF5E,EAGKH,MAAM,GAAII,IAAI,gBACX,oBAAC,qBAAD;AAAuB,IAAA,SAAS,EAAEG,OAAO,GAAGiB,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,gBAEX,oBAAC,mBAAD;AAAqB,IAAA,SAAS,EAAEjB,OAAO,GAAGiB,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,gBAGH,oBAAC,qBAAD;AAAuB,IAAA,SAAS,EAAEjB,OAAO,GAAGiB,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANR,EAOK,CAAC1B,KAAK,CAACa,MAAP,gBAAgB;AAAI,IAAA,SAAS,EAAEJ,OAAO,GAAGc,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCvB,KAAK,CAACK,IAA3C,CAAhB,GAAwE,IAP7E,CADJ;AAWH;;AAED,eAAeN,UAAf","sourcesContent":["import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setDesc, setSort} from \"../../actions\";\r\nimport {State} from \"../../types/State\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport {Paper} from \"@material-ui/core\";\r\nimport sortBy from \"../../App\";\r\n\r\n// Knapp som oppdaterer hva kategori vi sorterer etter og hvilken retning vi sorterer i\r\nfunction SortButton(props: { mobile: boolean, sort: string, refresh: () => void, nummer: string }) {\r\n\r\n    // Nødvendig for redux\r\n    const dispatch = useDispatch();\r\n\r\n    // Definerer om knappen er trykket basert på om filteret i redux state er likt som navnet til denne knappen\r\n    const active = useSelector((state: State) => state.filter.sort) === props.sort;\r\n    // Bestemmer rentning basert på filter i state\r\n    const desc = useSelector((state: State) => state.filter.desc);\r\n\r\n    // Håndterer trykk på knapp, endrer filter i state basert på tittel og retning\r\n    function toggleSort() {\r\n        if (active) {\r\n            // Hvis aktiv, bare bytt retning\r\n            dispatch(setDesc(!desc));\r\n        } else {\r\n            // Hvis ikke aktiv, sett sort i state og set descending til true\r\n            dispatch(setSort(props.sort));\r\n            dispatch(setDesc(true));\r\n        }\r\n        props.refresh();\r\n    }\r\n\r\n    const classes = makeStyles({\r\n        div: {\r\n            display: 'flex',\r\n            flexDirection: props.mobile ? 'column' : 'row',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            backgroundColor: 'rgb(200, 200, 200, 0.5)',\r\n            borderRadius: '5px',\r\n            cursor: 'pointer',\r\n            width: (1 / sortBy.length) * 100 - 5 + '%',\r\n            margin: '10px',\r\n            height: '100%'\r\n        },\r\n        sortTitle: {\r\n            color: active ? '#E98074' : '#D1D1D1',\r\n            width: '100%',\r\n            margin: 0,\r\n            paddingTop: props.mobile ? '40px' : '7px'\r\n        },\r\n        arrow: {\r\n            color: (active ? \"#E98074\" : \"#D1D1D1\")\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Paper className={classes().div} data-testid={\"sortbutton\" + props.nummer} id={\"sortbutton\" + props.nummer}\r\n               onClick={toggleSort}>\r\n            {props.mobile ? <h3 className={classes().sortTitle}>{props.sort}</h3> : null}\r\n            {active ? (desc ?\r\n                <KeyboardArrowDownIcon className={classes().arrow}/> :\r\n                <KeyboardArrowUpIcon className={classes().arrow}/>) :\r\n                <KeyboardArrowLeftIcon className={classes().arrow}/>}\r\n            {!props.mobile ? <h3 className={classes().sortTitle}>{props.sort}</h3> : null}\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default SortButton;\r\n"]},"metadata":{},"sourceType":"module"}