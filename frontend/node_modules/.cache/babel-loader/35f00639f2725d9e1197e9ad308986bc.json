{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\App.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './CSS/App.css';\nimport Header from \"./Components/Header/Header\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setDesc, setGenre, setGenresState, setMovieState, setSearch, setSort } from \"./actions\";\nimport ControlPanel from \"./Components/ControlPanel/ControlPanel\";\nimport MovieSection from \"./Components/MovieSection/MovieSection\";\nimport { Icon } from 'semantic-ui-react'; // App komponenten setter default state, og har ansvar for å hente inn filmer og behandle dem\n\nfunction App() {\n  // Nødvendig definisjon for redux\n  const dispatch = useDispatch(); // Setter filmer\n\n  const setMovies = useCallback(movies => {\n    dispatch(setMovieState(movies));\n  }, [dispatch]); // Setter sjangre\n\n  const setGenres = useCallback(genres => {\n    dispatch(setGenresState(genres));\n  }, [dispatch]); // Overordnet funksjon som setter alle filtere\n\n  const setFilter = useCallback(filter => {\n    dispatch(setDesc(filter.desc));\n    dispatch(setSearch(filter.search));\n    dispatch(setGenre(filter.genre));\n    dispatch(setSort(filter.sort));\n  }, [dispatch]); // Henter filter fra Redux\n\n  const filter = useSelector(state => state.filter); // Setter et default filter og henter filmer en gang på starten\n\n  useEffect(() => {\n    setFilter({\n      desc: true,\n      sort: \"Name\",\n      search: \"\",\n      genre: \"\",\n      score: [0, 10],\n      year: [1900, 2020],\n      duration: [0, 320],\n      myMovies: false\n    });\n    fetchMovies(setMovies, setGenres, filter, true);\n  }, [filter, setFilter, setGenres, setMovies]); // Funksjon som refresher filmene\n\n  function refresh() {\n    setMovies([]);\n    fetchMovies(setMovies, setGenres, filter, false);\n  } //Brukes for å skru av og på burgermenyen\n\n\n  let [showMenu, toggleShowMenu] = useState(false);\n\n  function toggleMenu() {\n    toggleShowMenu(!showMenu);\n  } // Returnerer Main appen\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    refresh: refresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"FilterButton\",\n    onClick: toggleMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"sliders\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }), showMenu ? \"Close filter\" : \"Filter\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MainContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ControlPanel, {\n    refresh: refresh,\n    show: showMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MovieSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  })));\n} // Henter inn filmer, og sorterer basert på et filter\n\n\nfunction fetchMovies(setMovies, setGenres, filter, first) {\n  fetch('http://localhost:5000/api/movies?genre=' + filter.genre + '&title=' + filter.search).then(response => {\n    if (response.ok) {\n      response.json().then(data => {\n        if (data.length > 0) {\n          // Sorterer filmene basert på hvilken kategori vi sorterer etter\n          switch (filter.sort) {\n            case \"Name\":\n              data.sort((b, a) => {\n                if (a.title < b.title) {\n                  return -1;\n                }\n\n                if (a.title > b.title) {\n                  return 1;\n                }\n\n                return 0;\n              });\n              break;\n\n            case \"Rating\":\n              data.sort((a, b) => a.imdbRating - b.imdbRating);\n              break;\n\n            case \"Duration\":\n              data.sort((a, b) => {\n                return a.duration - b.duration;\n              });\n              break;\n\n            case \"Year\":\n              data.sort((a, b) => parseInt(a.year) - parseInt(b.year));\n          } // Setter filmene i redux state, reverserer listen om vi sorterer descending\n\n\n          setMovies(filter.desc ? data.reverse() : data); // Bare oppdater sjanger listen hvis det er første gang vi laster inn\n\n          if (first) {\n            genreUpdate(data.map(movie => movie.genres), setGenres);\n          }\n        }\n      });\n    } else {\n      setMovies({\n        error: \"no movies\"\n      });\n    }\n  });\n} // Setter sjangrene i state\n\n\nfunction genreUpdate(movies, setGenres) {\n  let genres = [];\n  movies.forEach(movieGenres => {\n    movieGenres.forEach(genre => {\n      if (!genres.includes(genre)) {\n        genres.push(genre);\n      }\n    });\n  });\n  setGenres(genres);\n}\n\nexport default App;","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/App.tsx"],"names":["React","useCallback","useEffect","useState","Header","useDispatch","useSelector","setDesc","setGenre","setGenresState","setMovieState","setSearch","setSort","ControlPanel","MovieSection","Icon","App","dispatch","setMovies","movies","setGenres","genres","setFilter","filter","desc","search","genre","sort","state","score","year","duration","myMovies","fetchMovies","refresh","showMenu","toggleShowMenu","toggleMenu","first","fetch","then","response","ok","json","data","length","b","a","title","imdbRating","parseInt","reverse","genreUpdate","map","movie","error","forEach","movieGenres","includes","push"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\r\nimport './CSS/App.css';\r\nimport Header from \"./Components/Header/Header\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setDesc, setGenre, setGenresState, setMovieState, setSearch, setSort} from \"./actions\";\r\nimport {Filter} from \"./types/Filter\";\r\nimport {State} from \"./types/State\";\r\nimport {Movie} from \"./types/Movie\";\r\nimport ControlPanel from \"./Components/ControlPanel/ControlPanel\";\r\nimport MovieSection from \"./Components/MovieSection/MovieSection\";\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\n\r\n\r\n// App komponenten setter default state, og har ansvar for å hente inn filmer og behandle dem\r\nfunction App() {\r\n\r\n    // Nødvendig definisjon for redux\r\n    const dispatch = useDispatch();\r\n\r\n    // Setter filmer\r\n    const setMovies = useCallback((movies: any[]) => {\r\n        dispatch(setMovieState(movies));\r\n    }, [dispatch])\r\n\r\n    // Setter sjangre\r\n    const setGenres = useCallback((genres: string[]) => {\r\n        dispatch(setGenresState(genres))\r\n    }, [dispatch])\r\n\r\n    // Overordnet funksjon som setter alle filtere\r\n    const setFilter = useCallback((filter: Filter)  => {\r\n        dispatch(setDesc(filter.desc));\r\n        dispatch(setSearch(filter.search));\r\n        dispatch(setGenre(filter.genre));\r\n        dispatch(setSort(filter.sort));\r\n    }, [dispatch])\r\n\r\n    // Henter filter fra Redux\r\n    const filter = useSelector((state: State) => state.filter);\r\n\r\n    // Setter et default filter og henter filmer en gang på starten\r\n    useEffect(() => {\r\n        setFilter({\r\n            desc: true,\r\n            sort: \"Name\",\r\n            search: \"\",\r\n            genre: \"\",\r\n            score: [0, 10],\r\n            year: [1900, 2020],\r\n            duration: [0, 320],\r\n            myMovies: false\r\n        });\r\n        fetchMovies(setMovies, setGenres, filter, true)\r\n    }, [filter, setFilter, setGenres, setMovies])\r\n\r\n    // Funksjon som refresher filmene\r\n    function refresh() {\r\n        setMovies([]);\r\n        fetchMovies(setMovies, setGenres, filter, false)\r\n    }\r\n\r\n    //Brukes for å skru av og på burgermenyen\r\n    let [showMenu, toggleShowMenu] = useState(false);\r\n\r\n    function toggleMenu() {\r\n        toggleShowMenu(!showMenu);\r\n    }\r\n    // Returnerer Main appen\r\n    return (\r\n        <div className=\"App\">\r\n            <Header refresh={refresh}/>\r\n            <button className=\"FilterButton\" onClick={toggleMenu}>\r\n                <Icon name=\"sliders\"/>\r\n                {showMenu ? \"Close filter\":\"Filter\"}\r\n            </button>\r\n            <div className=\"MainContent\">\r\n                <ControlPanel refresh={refresh} show={showMenu}/>\r\n                <MovieSection/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Henter inn filmer, og sorterer basert på et filter\r\nfunction fetchMovies(setMovies: any, setGenres: any, filter: Filter, first: boolean) {\r\n    fetch('http://localhost:5000/api/movies?genre=' + filter.genre + '&title=' + filter.search)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                response.json().then((data: any[]) => {\r\n                    if (data.length > 0) {\r\n                        // Sorterer filmene basert på hvilken kategori vi sorterer etter\r\n                        switch (filter.sort) {\r\n                            case \"Name\":\r\n                                data.sort((b: Movie, a: Movie) => {\r\n                                    if (a.title < b.title) {\r\n                                        return -1;\r\n                                    }\r\n                                    if (a.title > b.title) {\r\n                                        return 1;\r\n                                    }\r\n                                    return 0;\r\n                                });\r\n                                break;\r\n                            case \"Rating\":\r\n                                data.sort((a: Movie, b: Movie) => a.imdbRating - b.imdbRating);\r\n                                break\r\n                            case \"Duration\":\r\n                                data.sort((a: Movie, b: Movie) => {\r\n                                    return a.duration - b.duration;\r\n                                });\r\n                                break;\r\n                            case \"Year\":\r\n                                data.sort((a: Movie, b: Movie) => parseInt(a.year) - parseInt(b.year))\r\n                        }\r\n\r\n                        // Setter filmene i redux state, reverserer listen om vi sorterer descending\r\n                        setMovies(filter.desc ? data.reverse() : data);\r\n\r\n                        // Bare oppdater sjanger listen hvis det er første gang vi laster inn\r\n                        if (first) {\r\n                            genreUpdate(data.map((movie: any) => movie.genres), setGenres);\r\n                        }\r\n                    }\r\n                })} else {\r\n                setMovies({error: \"no movies\"});\r\n            }})\r\n}\r\n\r\n// Setter sjangrene i state\r\nfunction genreUpdate(movies: any[], setGenres: any) {\r\n    let genres: string[] = [];\r\n    movies.forEach((movieGenres: string[]) => {\r\n        movieGenres.forEach((genre: string) => {\r\n            if (!genres.includes(genre)) {\r\n                genres.push(genre);\r\n            }\r\n        })\r\n    })\r\n    setGenres(genres);\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}