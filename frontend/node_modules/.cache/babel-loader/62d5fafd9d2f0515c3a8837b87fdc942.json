{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\Components\\\\MovieSection\\\\Popup.tsx\";\nimport React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"@material-ui/core\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { login, setPopup } from \"../../actions\";\nimport ImdbIcon from \"../Shared/ImdbIcon\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nfunction Popup() {\n  // Henter state fra redux\n  const reduxState = useSelector(state => state); // Nødvendig for redux\n\n  const dispatch = useDispatch();\n  let req = {};\n\n  if (!!reduxState.user) {\n    req = {\n      method: 'POST',\n      body: JSON.stringify({\n        userName: reduxState.user.userName,\n        movieId: reduxState.details.movie._id\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  } // Tar vekk en view og fjerner den fra lista di\n\n\n  function changeView(remove) {\n    fetch('http://localhost:5000/api/user/' + (remove ? 'removeMovie' : 'addMovie'), req).then(response => {\n      if (response.ok) {\n        if (remove) {\n          reduxState.details.movie.watches--;\n          reduxState.user.movies = reduxState.user.movies.filter(movieId => movieId !== reduxState.details.movie._id);\n        } else {\n          reduxState.details.movie.watches++;\n          reduxState.user.movies.push(reduxState.details.movie._id);\n        }\n\n        dispatch(setPopup(reduxState.details.movie));\n        dispatch(login(reduxState.user));\n      }\n    }).catch(error => console.log(error));\n  }\n\n  const classes = makeStyles({\n    root: {\n      margin: '0 20px 0 20px',\n      display: reduxState.details.show ? 'flex' : 'none',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    buttons: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, reduxState.details.movie.title), /*#__PURE__*/React.createElement(\"img\", {\n    width: \"400px\",\n    alt: \"movie poster could not load\",\n    src: reduxState.details.movie.posterurl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, reduxState.details.movie.year), /*#__PURE__*/React.createElement(ImdbIcon, {\n    rating: reduxState.details.movie.imdbRating,\n    height: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, !!reduxState.user ? /*#__PURE__*/React.createElement(Button, {\n    id: \"watchButton\",\n    variant: \"contained\",\n    disabled: reduxState.user.movies.includes(reduxState.details.movie._id),\n    onClick: () => changeView(false),\n    color: \"primary\",\n    endIcon: /*#__PURE__*/React.createElement(VisibilityIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 38\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Watched\") : null, !!reduxState.user && reduxState.user.movies.includes(reduxState.details.movie._id) ? /*#__PURE__*/React.createElement(Button, {\n    id: \"removeButton\",\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => changeView(true),\n    endIcon: /*#__PURE__*/React.createElement(DeleteIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 38\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, \"Remove from my list\") : null), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, reduxState.details.movie.genres.join(\", \")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, reduxState.details.movie.storyline));\n}\n\nexport default Popup;","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/Components/MovieSection/Popup.tsx"],"names":["React","useDispatch","useSelector","Button","VisibilityIcon","DeleteIcon","login","setPopup","ImdbIcon","makeStyles","Popup","reduxState","state","dispatch","req","user","method","body","JSON","stringify","userName","movieId","details","movie","_id","headers","changeView","remove","fetch","then","response","ok","watches","movies","filter","push","catch","error","console","log","classes","root","margin","display","show","flexDirection","alignItems","buttons","title","posterurl","year","imdbRating","includes","genres","join","storyline"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {State} from \"../../types/State\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {login, setPopup} from \"../../actions\";\r\nimport ImdbIcon from \"../Shared/ImdbIcon\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\n\r\nfunction Popup() {\r\n\r\n    // Henter state fra redux\r\n    const reduxState = useSelector((state: State) => state);\r\n\r\n    // Nødvendig for redux\r\n    const dispatch = useDispatch();\r\n\r\n    let req = {};\r\n    if (!!reduxState.user) {\r\n        req = ({\r\n            method: 'POST',\r\n            body: JSON.stringify({userName: reduxState.user.userName, movieId: reduxState.details.movie._id}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n    }\r\n\r\n    // Tar vekk en view og fjerner den fra lista di\r\n    function changeView(remove: boolean) {\r\n        fetch('http://localhost:5000/api/user/' + (remove ? 'removeMovie' : 'addMovie'), req)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    if (remove) {\r\n                        reduxState.details.movie.watches--;\r\n                        reduxState.user.movies = reduxState.user.movies.filter(movieId => movieId !== reduxState.details.movie._id);\r\n                    } else {\r\n                        reduxState.details.movie.watches++;\r\n                        reduxState.user.movies.push(reduxState.details.movie._id);\r\n                    }\r\n                    dispatch(setPopup(reduxState.details.movie));\r\n                    dispatch(login(reduxState.user));\r\n                }\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    const classes = makeStyles({\r\n        root: {\r\n            margin: '0 20px 0 20px',\r\n            display: reduxState.details.show ? 'flex' : 'none',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        },\r\n        buttons: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={classes().root}>\r\n            <h1>{reduxState.details.movie.title}</h1>\r\n            <img width='400px' alt=\"movie poster could not load\" src={reduxState.details.movie.posterurl}/>\r\n            <h2>{reduxState.details.movie.year}</h2>\r\n            <ImdbIcon rating={reduxState.details.movie.imdbRating} height={50}/>\r\n            <div className={classes().buttons}>\r\n                {!!reduxState.user ?\r\n                    <Button id='watchButton'\r\n                            variant='contained'\r\n                            disabled={reduxState.user.movies.includes(reduxState.details.movie._id)}\r\n                            onClick={() => changeView(false)}\r\n                            color='primary'\r\n                            endIcon={<VisibilityIcon/>}\r\n                    >Watched</Button>\r\n                    : null}\r\n                {!!reduxState.user && reduxState.user.movies.includes(reduxState.details.movie._id) ?\r\n                    <Button id='removeButton'\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            onClick={() => changeView(true)}\r\n                            endIcon={<DeleteIcon/>}\r\n                    >Remove from my list</Button>\r\n                    :\r\n                    null}\r\n            </div>\r\n            <h3>{reduxState.details.movie.genres.join(\", \")}</h3>\r\n            <p>{reduxState.details.movie.storyline}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Popup;"]},"metadata":{},"sourceType":"module"}