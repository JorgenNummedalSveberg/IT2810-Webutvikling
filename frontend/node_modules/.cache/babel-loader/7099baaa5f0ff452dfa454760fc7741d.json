{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\App.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Header from \"./Components/Header/Header\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setGenresState, setMovieState } from \"./actions\";\nimport ControlPanel from \"./Components/ControlPanel/ControlPanel\";\nimport MovieSection from \"./Components/MovieSection/MovieSection\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport { Button, Drawer, useMediaQuery } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport SortButton from \"./Components/Header/SortButton\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\"; // Ulike ting vi sorterer etter, komponenten returnerer en knapp for hvert element\n\nexport const sortBy = [\"Name\", \"Rating\", \"Length\", \"Year\"]; // App komponenten setter default state, og har ansvar for å hente inn filmer og behandle dem\n\nfunction App() {\n  // Nødvendig definisjon for redux\n  const dispatch = useDispatch(); // Setter filmer\n\n  const setMovies = useCallback(movies => {\n    dispatch(setMovieState(movies));\n  }, [dispatch]); // Setter sjangre\n\n  const setGenres = useCallback(genres => {\n    dispatch(setGenresState(genres));\n  }, [dispatch]); // Henter filter fra Redux\n\n  const filter = useSelector(state => state.filter); // Setter et default filter og henter filmer en gang på starten\n\n  useEffect(() => {\n    fetchMovies(setMovies, setGenres, filter, true);\n  }, [filter, setGenres, setMovies]); // Funksjon som refresher filmene\n\n  function refresh() {\n    setMovies([]);\n    fetchMovies(setMovies, setGenres, filter, false);\n  }\n\n  const classes = makeStyles({\n    root: {\n      height: '100%',\n      overflow: 'hidden'\n    },\n    header: {\n      height: useMediaQuery('(max-width: 1400px)').valueOf() ? '200px' : '10%',\n      position: 'fixed',\n      width: '100%',\n      zIndex: 100\n    },\n    mainBox: {\n      position: 'absolute',\n      width: '100%',\n      height: useMediaQuery('(max-width: 1400px)').valueOf() ? '80%' : '90%',\n      top: useMediaQuery('(max-width: 1400px)').valueOf() ? '20%' : '10%'\n    },\n    row: {\n      flexDirection: 'row'\n    },\n    column: {\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    movieSection: {\n      marginLeft: useMediaQuery('(max-width: 1400px)').valueOf() ? '' : '500px'\n    },\n    filterButton: {\n      fontSize: '2em',\n      backgroundColor: 'rgb(200, 200, 200, 0.5)',\n      padding: '0 20px 0 20px',\n      margin: '20px 10px 20px 10px'\n    },\n    sorting: {\n      backgroundColor: '#40798C',\n      display: 'flex',\n      justifyContent: 'center',\n      height: '200px',\n      padding: '40px',\n      '& *': {\n        margin: '10px',\n        fontSize: '1.3em'\n      }\n    },\n    wide: {\n      display: useMediaQuery('(min-width: 1401px)').valueOf() ? 'initial' : 'none'\n    },\n    thin: {\n      display: useMediaQuery('(max-width: 1400px)').valueOf() ? 'flex' : 'none',\n      justifyContent: 'center',\n      textAlign: 'center'\n    }\n  });\n  const [openSorting, setSortingOpen] = useState(false);\n  const [openFilter, setFilterOpen] = useState(false);\n  const filterButton = /*#__PURE__*/React.createElement(Button, {\n    className: classes().filterButton,\n    startIcon: /*#__PURE__*/React.createElement(TuneIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 24\n      }\n    }),\n    onClick: () => setFilterOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Filters\");\n  const sortButton = /*#__PURE__*/React.createElement(Button, {\n    className: classes().filterButton,\n    startIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 24\n      }\n    }),\n    onClick: () => setSortingOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Sort by\"); // Returnerer Main appen\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    refresh: refresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${classes().mainBox} ${useMediaQuery('(min-width: 1401px)').valueOf() ? classes().row : classes().column}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().wide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ControlPanel, {\n    mobile: false,\n    refresh: refresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().thin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, sortButton, /*#__PURE__*/React.createElement(Drawer, {\n    anchor: 'top',\n    open: openSorting,\n    onClose: () => setSortingOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    startIcon: /*#__PURE__*/React.createElement(ArrowBackIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 44\n      }\n    }),\n    onClick: () => setSortingOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 25\n    }\n  }, \"Close\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().sorting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }, sortBy.map((sort, index) => /*#__PURE__*/React.createElement(SortButton, {\n    mobile: true,\n    key: index,\n    sort: sort,\n    refresh: refresh,\n    nummer: index.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 33\n    }\n  })))), filterButton, /*#__PURE__*/React.createElement(Drawer, {\n    anchor: 'left',\n    open: openFilter,\n    onClose: () => setFilterOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    startIcon: /*#__PURE__*/React.createElement(ArrowBackIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 44\n      }\n    }),\n    onClick: () => setFilterOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, \"Close\"), /*#__PURE__*/React.createElement(ControlPanel, {\n    mobile: true,\n    refresh: refresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().movieSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MovieSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }))));\n} // Henter inn filmer, og sorterer basert på et filter\n\n\nfunction fetchMovies(setMovies, setGenres, filter, first) {\n  fetch('http://localhost:5000/api/movies?genre=' + (filter.genre === \"Select genre...\" ? \"\" : filter.genre) + '&title=' + filter.search).then(response => {\n    if (response.ok) {\n      response.json().then(data => {\n        if (data.length > 0) {\n          // Sorterer filmene basert på hvilken kategori vi sorterer etter\n          switch (filter.sort) {\n            case \"Name\":\n              data.sort((b, a) => {\n                if (a.title < b.title) {\n                  return -1;\n                }\n\n                if (a.title > b.title) {\n                  return 1;\n                }\n\n                return 0;\n              });\n              break;\n\n            case \"Rating\":\n              data.sort((a, b) => a.imdbRating - b.imdbRating);\n              break;\n\n            case \"Length\":\n              data.sort((a, b) => {\n                return a.duration - b.duration;\n              });\n              break;\n\n            case \"Year\":\n              data.sort((a, b) => parseInt(a.year) - parseInt(b.year));\n          } // Setter filmene i redux state, reverserer listen om vi sorterer descending\n\n\n          setMovies(filter.desc ? data.reverse() : data); // Bare oppdater sjanger listen hvis det er første gang vi laster inn\n\n          if (first) {\n            genreUpdate(data.map(movie => movie.genres), setGenres);\n          }\n        }\n      });\n    } else {\n      setMovies({\n        error: \"no movies\"\n      });\n    }\n  });\n} // Setter sjangrene i state\n\n\nfunction genreUpdate(movies, setGenres) {\n  let genres = [\"Select genre...\"];\n  movies.forEach(movieGenres => {\n    movieGenres.forEach(genre => {\n      if (!genres.includes(genre)) {\n        genres.push(genre);\n      }\n    });\n  });\n  setGenres(genres);\n}\n\nexport default App;","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/App.tsx"],"names":["React","useCallback","useEffect","useState","Header","useDispatch","useSelector","setGenresState","setMovieState","ControlPanel","MovieSection","TuneIcon","Button","Drawer","useMediaQuery","makeStyles","ExpandMoreIcon","SortButton","ArrowBackIcon","sortBy","App","dispatch","setMovies","movies","setGenres","genres","filter","state","fetchMovies","refresh","classes","root","height","overflow","header","valueOf","position","width","zIndex","mainBox","top","row","flexDirection","column","alignItems","movieSection","marginLeft","filterButton","fontSize","backgroundColor","padding","margin","sorting","display","justifyContent","wide","thin","textAlign","openSorting","setSortingOpen","openFilter","setFilterOpen","sortButton","map","sort","index","toString","first","fetch","genre","search","then","response","ok","json","data","length","b","a","title","imdbRating","duration","parseInt","year","desc","reverse","genreUpdate","movie","error","forEach","movieGenres","includes","push"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\r\nimport Header from \"./Components/Header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setGenresState, setMovieState} from \"./actions\";\r\nimport {Filter} from \"./types/Filter\";\r\nimport {State} from \"./types/State\";\r\nimport {Movie} from \"./types/Movie\";\r\nimport ControlPanel from \"./Components/ControlPanel/ControlPanel\";\r\nimport MovieSection from \"./Components/MovieSection/MovieSection\";\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport {Button, Drawer, useMediaQuery} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport SortButton from \"./Components/Header/SortButton\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\n// Ulike ting vi sorterer etter, komponenten returnerer en knapp for hvert element\r\nexport const sortBy = [\"Name\", \"Rating\", \"Length\", \"Year\"];\r\n\r\n\r\n// App komponenten setter default state, og har ansvar for å hente inn filmer og behandle dem\r\nfunction App() {\r\n\r\n    // Nødvendig definisjon for redux\r\n    const dispatch = useDispatch();\r\n\r\n    // Setter filmer\r\n    const setMovies = useCallback((movies: any[]) => {\r\n        dispatch(setMovieState(movies));\r\n    }, [dispatch])\r\n\r\n    // Setter sjangre\r\n    const setGenres = useCallback((genres: string[]) => {\r\n        dispatch(setGenresState(genres))\r\n    }, [dispatch])\r\n\r\n    // Henter filter fra Redux\r\n    const filter = useSelector((state: State) => state.filter);\r\n\r\n    // Setter et default filter og henter filmer en gang på starten\r\n    useEffect(() => {\r\n        fetchMovies(setMovies, setGenres, filter, true)\r\n    }, [filter, setGenres, setMovies])\r\n\r\n    // Funksjon som refresher filmene\r\n    function refresh() {\r\n        setMovies([]);\r\n        fetchMovies(setMovies, setGenres, filter, false)\r\n    }\r\n\r\n    const classes = makeStyles({\r\n        root: {\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n        },\r\n        header: {\r\n            height: useMediaQuery('(max-width: 1400px)').valueOf() ? '200px' : '10%',\r\n            position: 'fixed',\r\n            width: '100%',\r\n            zIndex: 100\r\n        },\r\n        mainBox: {\r\n            position: 'absolute',\r\n            width: '100%',\r\n            height: useMediaQuery('(max-width: 1400px)').valueOf() ? '80%' : '90%',\r\n            top: useMediaQuery('(max-width: 1400px)').valueOf() ? '20%' : '10%',\r\n        },\r\n        row: {\r\n            flexDirection: 'row'\r\n        },\r\n        column: {\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        movieSection: {\r\n            marginLeft: useMediaQuery('(max-width: 1400px)').valueOf() ? '' : '500px',\r\n        },\r\n        filterButton: {\r\n            fontSize: '2em',\r\n            backgroundColor: 'rgb(200, 200, 200, 0.5)',\r\n            padding: '0 20px 0 20px',\r\n            margin: '20px 10px 20px 10px'\r\n        },\r\n        sorting: {\r\n            backgroundColor: '#40798C',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            height: '200px',\r\n            padding: '40px',\r\n            '& *': {\r\n                margin: '10px',\r\n                fontSize: '1.3em'\r\n            }\r\n        },\r\n        wide: {\r\n            display: useMediaQuery('(min-width: 1401px)').valueOf() ? 'initial' : 'none'\r\n        },\r\n        thin: {\r\n            display: useMediaQuery('(max-width: 1400px)').valueOf() ? 'flex' : 'none',\r\n            justifyContent: 'center',\r\n            textAlign: 'center'\r\n        },\r\n    })\r\n\r\n    const [openSorting, setSortingOpen] = useState(false)\r\n    const [openFilter, setFilterOpen] = useState(false)\r\n\r\n    const filterButton = (\r\n        <Button\r\n            className={classes().filterButton}\r\n            startIcon={<TuneIcon/>}\r\n            onClick={() => setFilterOpen(true)}\r\n        >Filters\r\n        </Button>\r\n    )\r\n\r\n    const sortButton = (\r\n        <Button\r\n            className={classes().filterButton}\r\n            startIcon={<ExpandMoreIcon/>}\r\n            onClick={() => setSortingOpen(true)}\r\n        >Sort by\r\n        </Button>\r\n    )\r\n\r\n    // Returnerer Main appen\r\n    return (\r\n        <div className={classes().root}>\r\n            <div className={classes().header}>\r\n                <Header refresh={refresh}/>\r\n            </div>\r\n            <div\r\n                className={`${classes().mainBox} ${useMediaQuery('(min-width: 1401px)').valueOf() ? classes().row : classes().column}`}>\r\n                <div className={classes().wide}>\r\n                    <ControlPanel mobile={false} refresh={refresh}/>\r\n                </div>\r\n                <div className={classes().thin}>\r\n                    {sortButton}\r\n                    <Drawer anchor={'top'} open={openSorting} onClose={() => setSortingOpen(false)}>\r\n                        <Button startIcon={<ArrowBackIcon/>} onClick={() => setSortingOpen(false)}>Close</Button>\r\n                        <div className={classes().sorting}>\r\n                            {sortBy.map((sort, index) => (\r\n                                <SortButton mobile={true} key={index} sort={sort} refresh={refresh}\r\n                                            nummer={index.toString()}/>\r\n                            ))}\r\n                        </div>\r\n                    </Drawer>\r\n                    {filterButton}\r\n                    <Drawer anchor={'left'} open={openFilter} onClose={() => setFilterOpen(false)}>\r\n                        <Button startIcon={<ArrowBackIcon/>} onClick={() => setFilterOpen(false)}>Close</Button>\r\n                        <ControlPanel mobile={true} refresh={refresh}/>\r\n                    </Drawer>\r\n                </div>\r\n                <div className={classes().movieSection}>\r\n                    <MovieSection/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Henter inn filmer, og sorterer basert på et filter\r\nfunction fetchMovies(setMovies: any, setGenres: any, filter: Filter, first: boolean) {\r\n    fetch('http://localhost:5000/api/movies?genre='\r\n        + (filter.genre === \"Select genre...\" ? \"\" : filter.genre)\r\n        + '&title=' + filter.search)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                response.json().then((data: any[]) => {\r\n                    if (data.length > 0) {\r\n                        // Sorterer filmene basert på hvilken kategori vi sorterer etter\r\n                        switch (filter.sort) {\r\n                            case \"Name\":\r\n                                data.sort((b: Movie, a: Movie) => {\r\n                                    if (a.title < b.title) {\r\n                                        return -1;\r\n                                    }\r\n                                    if (a.title > b.title) {\r\n                                        return 1;\r\n                                    }\r\n                                    return 0;\r\n                                });\r\n                                break;\r\n                            case \"Rating\":\r\n                                data.sort((a: Movie, b: Movie) => a.imdbRating - b.imdbRating);\r\n                                break\r\n                            case \"Length\":\r\n                                data.sort((a: Movie, b: Movie) => {\r\n                                    return a.duration - b.duration;\r\n                                });\r\n                                break;\r\n                            case \"Year\":\r\n                                data.sort((a: Movie, b: Movie) => parseInt(a.year) - parseInt(b.year))\r\n                        }\r\n\r\n                        // Setter filmene i redux state, reverserer listen om vi sorterer descending\r\n                        setMovies(filter.desc ? data.reverse() : data);\r\n\r\n                        // Bare oppdater sjanger listen hvis det er første gang vi laster inn\r\n                        if (first) {\r\n                            genreUpdate(data.map((movie: any) => movie.genres), setGenres);\r\n                        }\r\n                    }\r\n                })\r\n            } else {\r\n                setMovies({error: \"no movies\"});\r\n            }\r\n        })\r\n}\r\n\r\n// Setter sjangrene i state\r\nfunction genreUpdate(movies: any[], setGenres: any) {\r\n    let genres = [\"Select genre...\"];\r\n    movies.forEach((movieGenres: string[]) => {\r\n        movieGenres.forEach((genre: string) => {\r\n            if (!genres.includes(genre)) {\r\n                genres.push(genre);\r\n            }\r\n        })\r\n    })\r\n    setGenres(genres);\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}