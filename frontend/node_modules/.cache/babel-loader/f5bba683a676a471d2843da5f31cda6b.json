{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\Components\\\\MovieSection\\\\MovieCard.tsx\";\nimport { useDispatch } from \"react-redux\";\nimport { setPopup, showPopup } from \"../../actions\";\nimport { ButtonBase, Card, Divider, Grid, Paper } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport HourglassFullIcon from '@material-ui/icons/HourglassFull';\nimport ImdbIcon from \"../Shared/ImdbIcon\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/styles\"; // Komponent for å vise frem en film i et kort\n\nfunction MovieCard(props) {\n  // Nødvendig for redux\n  const dispatch = useDispatch(); // Åpner opp Popup.\n\n  function handleClick() {\n    dispatch(setPopup(props.movie));\n    dispatch(showPopup(true));\n  }\n\n  const classes = makeStyles({\n    card: {\n      height: \"100%\",\n      width: '100%',\n      backgroundColor: '#464646'\n    },\n    gridItem: {\n      flexGrow: 1,\n      flexBasis: 1,\n      maxWidth: '600px',\n      width: '600px'\n    },\n    paperButton: {\n      height: \"100%\",\n      width: '100%'\n    },\n    paper: {\n      backgroundColor: '#E85A4F',\n      height: \"100%\",\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    poster: {\n      maxWidth: '500px',\n      minWidth: '250px'\n    },\n    details: {\n      padding: '10px',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    title: {\n      flexGrow: 1\n    },\n    description: {\n      flexGrow: 4,\n      color: 'white',\n      textAlign: 'left'\n    },\n    bottomInfo: {\n      margin: '10px',\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      flexGrow: 1,\n      '& *': {\n        margin: '5px'\n      }\n    },\n    duration: {\n      color: '#e5dfca',\n      display: 'flex',\n      alignItems: 'center'\n    },\n    noMargin: {\n      margin: 0\n    }\n  });\n  return /*#__PURE__*/React.createElement(Grid, {\n    className: classes().gridItem,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonBase, {\n    className: classes().paperButton,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes().paper,\n    elevation: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes().poster,\n    alt: \"Could not display movie poster\",\n    width: \"100%\",\n    src: props.movie.posterurl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }\n  }, props.movie.title), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }\n  }, \"Year: \", props.movie.year), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }, \"Genres: \", props.movie.genres.join(', '))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().bottomInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().duration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(HourglassFullIcon, {\n    className: classes().noMargin,\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes().noMargin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  }, parseTime(props.movie.duration))), /*#__PURE__*/React.createElement(Divider, {\n    orientation: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(ImdbIcon, {\n    rating: props.movie.imdbRating,\n    height: 35,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }))))));\n} // Blanke kort for når nettsiden laster inn filmene\n\n\nexport function DimCard() {\n  return /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    style: {\n      height: \"100%\",\n      width: '100%',\n      backgroundColor: '#464646'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Skeleton, {\n    style: {\n      backgroundColor: '#222222'\n    },\n    variant: \"rect\",\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Skeleton, {\n    animation: \"wave\",\n    width: 340,\n    height: 40,\n    style: {\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Skeleton, {\n    animation: \"wave\",\n    width: 340,\n    height: 40,\n    style: {\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  })));\n} // Tar inn tid i formatet på databasen og gjør det om til presentabel string, eller rein minuttverdi\n\nfunction parseTime(time) {\n  let minutes = time;\n  let hours = 0;\n\n  while (minutes - 60 > 0) {\n    minutes -= 60;\n    hours++;\n  }\n\n  return hours + 'h' + minutes + 'm';\n}\n\nexport default MovieCard;","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/Components/MovieSection/MovieCard.tsx"],"names":["useDispatch","setPopup","showPopup","ButtonBase","Card","Divider","Grid","Paper","Skeleton","HourglassFullIcon","ImdbIcon","React","makeStyles","MovieCard","props","dispatch","handleClick","movie","classes","card","height","width","backgroundColor","gridItem","flexGrow","flexBasis","maxWidth","paperButton","paper","display","flexDirection","poster","minWidth","details","padding","title","description","color","textAlign","bottomInfo","margin","alignItems","justifyContent","duration","noMargin","posterurl","year","genres","join","parseTime","imdbRating","DimCard","time","minutes","hours"],"mappings":"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","sourcesContent":["import {Movie} from \"../../types/Movie\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setPopup, showPopup} from \"../../actions\";\r\nimport {ButtonBase, Card, Divider, Grid, Paper} from \"@material-ui/core\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport HourglassFullIcon from '@material-ui/icons/HourglassFull';\r\nimport ImdbIcon from \"../Shared/ImdbIcon\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\n// Komponent for å vise frem en film i et kort\r\nfunction MovieCard(props: { movie: Movie }) {\r\n\r\n    // Nødvendig for redux\r\n    const dispatch = useDispatch();\r\n\r\n    // Åpner opp Popup.\r\n    function handleClick() {\r\n        dispatch(setPopup(props.movie));\r\n        dispatch(showPopup(true));\r\n    }\r\n\r\n    const classes = makeStyles({\r\n        card: {height: \"100%\", width: '100%', backgroundColor: '#464646'},\r\n        gridItem: {flexGrow: 1, flexBasis: 1, maxWidth: '600px', width: '600px'},\r\n        paperButton: {height: \"100%\", width: '100%'},\r\n        paper: {backgroundColor: '#E85A4F', height: \"100%\", width: '100%', display: 'flex', flexDirection: 'row'},\r\n        poster: {maxWidth: '500px', minWidth: '250px'},\r\n        details: {padding: '10px', display: 'flex', flexDirection: 'column'},\r\n        title: {flexGrow: 1},\r\n        description: {flexGrow: 4, color: 'white', textAlign: 'left'},\r\n        bottomInfo: {\r\n            margin: '10px',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            flexGrow: 1,\r\n            '& *': {margin: '5px'}\r\n        },\r\n        duration: {color: '#e5dfca', display: 'flex', alignItems: 'center'},\r\n        noMargin: {\r\n            margin: 0\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Grid className={classes().gridItem} item>\r\n            <ButtonBase className={classes().paperButton} onClick={handleClick}>\r\n                <Paper className={classes().paper} elevation={5}>\r\n                    <img className={classes().poster} alt='Could not display movie poster' width='100%'\r\n                         src={props.movie.posterurl}/>\r\n                    <div className={classes().details}>\r\n                        <div className={classes().title}>\r\n                            <h1>{props.movie.title}</h1>\r\n                            <Divider/>\r\n                        </div>\r\n                        <div className={classes().description}>\r\n                            <h3>Year: {props.movie.year}</h3>\r\n                            <h3>Genres: {props.movie.genres.join(', ')}</h3>\r\n                        </div>\r\n                        <div className={classes().bottomInfo}>\r\n                            <div className={classes().duration}>\r\n                                <HourglassFullIcon className={classes().noMargin} fontSize={\"large\"}/>\r\n                                <p className={classes().noMargin}>{parseTime(props.movie.duration)}</p>\r\n                            </div>\r\n                            <Divider orientation='vertical'/>\r\n                            <ImdbIcon rating={props.movie.imdbRating} height={35}/>\r\n                        </div>\r\n                    </div>\r\n                </Paper>\r\n            </ButtonBase>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\n// Blanke kort for når nettsiden laster inn filmene\r\nexport function DimCard() {\r\n    return (\r\n        <Grid item>\r\n            <Card style={{height: \"100%\", width: '100%', backgroundColor: '#464646'}}>\r\n                <Skeleton style={{backgroundColor: '#222222'}} variant=\"rect\" width={\"100%\"} height={300}/>\r\n                <Skeleton animation=\"wave\" width={340} height={40} style={{margin: 10}}/>\r\n                <Skeleton animation=\"wave\" width={340} height={40} style={{margin: 10}}/>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// Tar inn tid i formatet på databasen og gjør det om til presentabel string, eller rein minuttverdi\r\nfunction parseTime(time: number): string {\r\n    let minutes = time;\r\n    let hours = 0;\r\n    while (minutes - 60 > 0) {\r\n        minutes -= 60;\r\n        hours++;\r\n    }\r\n    return hours + 'h' + minutes + 'm';\r\n}\r\n\r\nexport default MovieCard"]},"metadata":{},"sourceType":"module"}