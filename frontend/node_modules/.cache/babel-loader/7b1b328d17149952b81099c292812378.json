{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\Components\\\\MovieSection\\\\MovieSection.tsx\";\nimport React from 'react';\nimport './CSS/MovieSection.css';\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core';\nimport { Pagination } from '@material-ui/lab';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPage } from \"../../actions\";\nimport Popup from './Popup';\nimport MovieCard, { DimCard } from \"./MovieCard\"; // Komponent som viser frem alle filmene i en responsiv grid\n\nfunction MovieSection() {\n  // Nødvendig for redux\n  const dispatch = useDispatch(); // Redux tate for å holde styr på hvilen side vi er på\n\n  const page = useSelector(state => state.page); // Definerer en side å vise i tilfellet ingen filmer blir hentet\n\n  const errorPage = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GridView\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    style: {\n      margin: \"20px\",\n      width: '50%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    style: {\n      backgroundColor: 'pink'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"secondary\",\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }\n  }, \"No movies\")), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }, \"This might be because:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    style: {\n      listStyleType\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 29\n    }\n  }, \"You may not be on the NTNU network or your VPN is off\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  }, \"We do not have the movie you're looking for\"))), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: 'https://www.youtube.com/watch?v=oHg5SJYRHA0',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, \"Maybe this can help\"))))); // Sjekker først om det faktisk ble hentet filmer, og så filterer og displayer filmene\n\n  return useSelector(state => {\n    if (state.movies.hasOwnProperty('error')) {\n      return errorPage;\n    } else {\n      // Filtrerer utvalget basert på rating og årstall\n      const movies = state.movies.filter(movie => movie.imdbRating >= state.filter.score[0] && movie.imdbRating <= state.filter.score[1] && parseInt(movie.year) >= state.filter.year[0] && parseInt(movie.year) <= state.filter.year[1] && (!state.user || !!state.user && (!state.filter.myMovies || state.user.movies.includes(movie._id))));\n\n      if (state.movies.length > 0 && movies.length === 0) {\n        return errorPage;\n      }\n\n      const movieList = [];\n      movies.forEach((movie, index) => {\n        if (!movieList[Math.floor(index / 24)]) {\n          movieList[Math.floor(index / 24)] = [];\n        }\n\n        movieList[Math.floor(index / 24)].push(movie);\n      }); // Lager en liste med sorte kort som placeholder mens filmene laster\n\n      const dimList = () => {\n        const list = [];\n\n        for (let i = 0; i < 24; i++) {\n          list.push( /*#__PURE__*/React.createElement(DimCard, {\n            key: i,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 31\n            }\n          }));\n        }\n\n        return list;\n      }; // Lager en liste av alle MovieCards som skal med i Griden\n\n\n      let movieCards = dimList();\n\n      if (typeof movieList[page] !== \"undefined\") {\n        movieCards = movieList[page].map((movie, index) => {\n          return /*#__PURE__*/React.createElement(MovieCard, {\n            movie: movie,\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }\n          });\n        });\n      } // Definerer sidevalg menyen\n\n\n      const pagination = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          margin: '20px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Pagination, {\n        size: \"large\",\n        onChange: (e, page) => {\n          dispatch(setPage(page - 1));\n        },\n        page: page + 1,\n        count: movieList.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"GridView\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, state.details.show ? /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }) : null, pagination, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        style: {\n          padding: '2%'\n        },\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"stretch\",\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }\n      }, movieCards)), pagination);\n    }\n  });\n}\n\nexport default MovieSection;","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/Components/MovieSection/MovieSection.tsx"],"names":["React","Grid","Card","CardContent","Typography","Pagination","useDispatch","useSelector","setPage","Popup","MovieCard","DimCard","MovieSection","dispatch","page","state","errorPage","margin","width","backgroundColor","listStyleType","movies","hasOwnProperty","filter","movie","imdbRating","score","parseInt","year","user","myMovies","includes","_id","length","movieList","forEach","index","Math","floor","push","dimList","list","i","movieCards","map","pagination","e","details","show","padding"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './CSS/MovieSection.css';\r\nimport {Grid, Card, CardHeader, CardContent, List, ListItem, Typography} from '@material-ui/core'\r\nimport {Pagination} from '@material-ui/lab'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {State} from \"../../types/State\";\r\nimport {setPage} from \"../../actions\";\r\nimport Popup from './Popup';\r\nimport MovieCard, {DimCard} from \"./MovieCard\";\r\n\r\n\r\n// Komponent som viser frem alle filmene i en responsiv grid\r\nfunction MovieSection() {\r\n    // Nødvendig for redux\r\n    const dispatch = useDispatch();\r\n\r\n    // Redux tate for å holde styr på hvilen side vi er på\r\n    const page = useSelector((state: State) => state.page);\r\n\r\n    // Definerer en side å vise i tilfellet ingen filmer blir hentet\r\n    const errorPage = (\r\n        <div className={\"GridView\"}>\r\n            <Grid style={{margin: \"20px\", width: '50%'}}>\r\n                <Card style={{backgroundColor: 'pink'}}>\r\n                    <CardContent>\r\n                        <Typography color='secondary' variant=\"h5\" component=\"h2\">\r\n                            No movies\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        This might be because:\r\n                    </CardContent>\r\n                    <ul style={{listStyleType}}>\r\n                        <li><Typography color='secondary'>You may not be on the NTNU network or your VPN is off</Typography></li>\r\n                        <li><Typography color='secondary'>We do not have the movie you're looking for</Typography></li>\r\n                    </ul>\r\n                    <CardContent>\r\n                        <a href={'https://www.youtube.com/watch?v=oHg5SJYRHA0'}>Maybe this can help</a>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n    // Sjekker først om det faktisk ble hentet filmer, og så filterer og displayer filmene\r\n    return useSelector((state: State) => {\r\n        if (state.movies.hasOwnProperty('error')) {\r\n            return (errorPage);\r\n        } else {\r\n            // Filtrerer utvalget basert på rating og årstall\r\n            const movies = state.movies\r\n                .filter(movie =>\r\n                    movie.imdbRating >= state.filter.score[0] &&\r\n                    movie.imdbRating <= state.filter.score[1] &&\r\n                    parseInt(movie.year) >= state.filter.year[0] &&\r\n                    parseInt(movie.year) <= state.filter.year[1] &&\r\n                    (!state.user || (!!state.user && (!state.filter.myMovies || state.user.movies.includes(movie._id)))));\r\n\r\n            if (state.movies.length > 0 && movies.length === 0) {\r\n                return (errorPage);\r\n            }\r\n\r\n            const movieList: any[] = [];\r\n            movies.forEach((movie, index) => {\r\n                if (!movieList[Math.floor(index / 24)]) {\r\n                    movieList[Math.floor(index / 24)] = [];\r\n                }\r\n                movieList[Math.floor(index / 24)].push(movie);\r\n            })\r\n\r\n            // Lager en liste med sorte kort som placeholder mens filmene laster\r\n            const dimList = () => {\r\n                const list = [];\r\n                for (let i = 0; i < 24; i++) {\r\n                    list.push(<DimCard key={i}/>);\r\n                }\r\n                return list;\r\n            }\r\n\r\n            // Lager en liste av alle MovieCards som skal med i Griden\r\n            let movieCards: any[] = dimList();\r\n            if (typeof movieList[page] !== \"undefined\") {\r\n                movieCards = movieList[page].map((movie: any, index: number) => {\r\n                    return (\r\n                        <MovieCard movie={movie} key={index}/>\r\n                    )\r\n                })\r\n            }\r\n\r\n            // Definerer sidevalg menyen\r\n            const pagination = (\r\n                <div style={{margin: '20px'}}>\r\n                    <Pagination\r\n                        size=\"large\"\r\n                        onChange={(e: object, page: number) => {\r\n                            dispatch(setPage(page - 1));\r\n                        }}\r\n                        page={page + 1}\r\n                        count={movieList.length}/>\r\n                </div>\r\n            )\r\n\r\n            return (\r\n                <div className={\"GridView\"}>\r\n                    {state.details.show ?\r\n                        <Popup/> : null\r\n                    }\r\n                    {pagination}\r\n                    <div style={{width:'100%'}}>\r\n                        <Grid\r\n                            style={{padding: '2%'}}\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                            alignItems=\"stretch\"\r\n                            spacing={4}\r\n                            >\r\n                            {movieCards}\r\n                        </Grid>\r\n                    </div>\r\n                    {pagination}\r\n                </div>\r\n            )\r\n        }\r\n    })\r\n}\r\n\r\nexport default MovieSection;"]},"metadata":{},"sourceType":"module"}