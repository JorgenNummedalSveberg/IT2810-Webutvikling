{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\Components\\\\Header\\\\SignLogIn.tsx\";\nimport React, { useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { useDispatch } from \"react-redux\";\nimport { login, logout } from \"../../actions\";\nimport { Dialog } from \"@material-ui/core\";\n\nfunction SignLogIn(props) {\n  // Nødvendig for redux\n  const dispatch = useDispatch(); // Holder styr på inputs\n\n  const [userName, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\"); // Holder styr på error\n\n  const [error, setError] = useState(false); // Lager request for fetch\n\n  const req = reqUser => {\n    return {\n      method: 'POST',\n      body: JSON.stringify(reqUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n  }; // Legger til en bruker på serveren\n\n\n  function addUser(reqUser) {\n    fetch('http://localhost:5000/api/user/add', req(reqUser)).then(response => {\n      if (response.ok) {\n        dispatch(login(reqUser));\n      } else {\n        setError({\n          message: \"Username is taken\",\n          log: false\n        });\n      }\n    });\n  } // Logger inn hvis brukeren finnes\n\n\n  function onLogin(user) {\n    fetch('http://localhost:5000/api/user?userName=' + user.userName + '&password=' + user.password).then(response => {\n      if (response.ok) {\n        response.json().then(movies => {\n          user.movies = movies;\n          dispatch(login(user));\n        });\n      } else {\n        setError({\n          message: \"Username or password is wrong\",\n          log: true\n        });\n      }\n    });\n  } // @ts-ignore\n\n\n  function handleNameChange(value) {\n    setError(false);\n    setUsername(value);\n  } // @ts-ignore\n\n\n  function handlePasswordChange(value) {\n    setError(false);\n    setPassword(value);\n  }\n\n  return (\n    /*\r\n    <Modal centered size={\"mini\"}\r\n           trigger={<Button style={{zIndex: '1000000'}}>Log in/Sign up</Button>}\r\n           closeIcon>\r\n        <Modal.Header>Log in / Sign in</Modal.Header>\r\n        {error ? (\r\n            <Modal.Content>\r\n               <Message compact error content={error.message}/>\r\n            </Modal.Content>\r\n        ) : null}\r\n        <Modal.Content>\r\n            <Input error={!!error} id={\"UsernameID\"} autoFocus label={\"Username\"} onChange={(e, {value}) => handleNameChange(value)}\r\n                   name={\"userName\"} placeholder='Username'/>\r\n        </Modal.Content>\r\n        <Modal.Content>\r\n            <Input type={\"password\"} error={!!error && error.log} id={\"PasswordID\"} label={\"Password\"} onChange={(e, {value}) => handlePasswordChange(value)}\r\n                   name={\"password\"} placeholder='Password'/>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n            <Button id={\"loginButtonID\"} onClick={() => onLogin({\r\n                userName: userName,\r\n                password: password,\r\n                movies: []\r\n            })} type='submit'>Log in</Button>\r\n            <Button id={\"submitButtonID\"}\r\n                    onClick={() => addUser({userName: userName, password: password, movies: []})} type='submit'>Sign\r\n                up</Button>\r\n        </Modal.Actions>\r\n    </Modal>\r\n       */\n    props.open ? /*#__PURE__*/React.createElement(Dialog, {\n      open: props.open,\n      title: \"Log in/Sign up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }\n    }) : /*#__PURE__*/React.createElement(Button, {\n      onClick: () => dispatch(logout()),\n      style: {\n        zIndex: 1000000\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }\n    }, \"Log out\")\n  );\n}\n\nexport default SignLogIn;","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/Components/Header/SignLogIn.tsx"],"names":["React","useState","Button","useDispatch","login","logout","Dialog","SignLogIn","props","dispatch","userName","setUsername","password","setPassword","error","setError","req","reqUser","method","body","JSON","stringify","headers","addUser","fetch","then","response","ok","message","log","onLogin","user","json","movies","handleNameChange","value","handlePasswordChange","open","zIndex"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Input, Modal, Message} from \"semantic-ui-react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {User} from \"../../types/User\";\r\nimport {login, logout} from \"../../actions\";\r\nimport {Dialog} from \"@material-ui/core\";\r\n\r\nfunction SignLogIn(props: {open: boolean}) {\r\n\r\n    // Nødvendig for redux\r\n    const dispatch = useDispatch();\r\n\r\n    // Holder styr på inputs\r\n    const [userName, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    // Holder styr på error\r\n    const [error, setError] = useState<false | {message: string, log: boolean }>(false);\r\n\r\n    // Lager request for fetch\r\n    const req = (reqUser: User) => {\r\n        return ({\r\n            method: 'POST',\r\n            body: JSON.stringify(reqUser),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n    }\r\n\r\n    // Legger til en bruker på serveren\r\n    function addUser(reqUser: User) {\r\n        fetch('http://localhost:5000/api/user/add', req(reqUser))\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    dispatch(login(reqUser));\r\n                } else {\r\n                    setError({message: \"Username is taken\", log: false});\r\n                }})\r\n    }\r\n\r\n    // Logger inn hvis brukeren finnes\r\n    function onLogin(user: User) {\r\n        fetch('http://localhost:5000/api/user?userName=' + user.userName + '&password='+user.password)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    response.json()\r\n                        .then(movies => {\r\n                            user.movies = movies;\r\n                            dispatch(login(user))\r\n                        })\r\n                } else {\r\n                    setError({message: \"Username or password is wrong\", log: true});\r\n                }})\r\n    }\r\n\r\n    // @ts-ignore\r\n    function handleNameChange(value: string) {\r\n        setError(false);\r\n        setUsername(value);\r\n    }\r\n\r\n    // @ts-ignore\r\n    function handlePasswordChange(value: string) {\r\n        setError(false);\r\n        setPassword(value)\r\n    }\r\n\r\n    return (\r\n        /*\r\n        <Modal centered size={\"mini\"}\r\n               trigger={<Button style={{zIndex: '1000000'}}>Log in/Sign up</Button>}\r\n               closeIcon>\r\n            <Modal.Header>Log in / Sign in</Modal.Header>\r\n            {error ? (\r\n                <Modal.Content>\r\n                   <Message compact error content={error.message}/>\r\n                </Modal.Content>\r\n            ) : null}\r\n            <Modal.Content>\r\n                <Input error={!!error} id={\"UsernameID\"} autoFocus label={\"Username\"} onChange={(e, {value}) => handleNameChange(value)}\r\n                       name={\"userName\"} placeholder='Username'/>\r\n            </Modal.Content>\r\n            <Modal.Content>\r\n                <Input type={\"password\"} error={!!error && error.log} id={\"PasswordID\"} label={\"Password\"} onChange={(e, {value}) => handlePasswordChange(value)}\r\n                       name={\"password\"} placeholder='Password'/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button id={\"loginButtonID\"} onClick={() => onLogin({\r\n                    userName: userName,\r\n                    password: password,\r\n                    movies: []\r\n                })} type='submit'>Log in</Button>\r\n                <Button id={\"submitButtonID\"}\r\n                        onClick={() => addUser({userName: userName, password: password, movies: []})} type='submit'>Sign\r\n                    up</Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n\r\n         */\r\n        props.open ?\r\n            (<Dialog open={props.open} title='Log in/Sign up'>\r\n\r\n            </Dialog>):\r\n            (<Button onClick={() => dispatch(logout())} style={{zIndex: 1000000}}>Log out</Button>)\r\n\r\n    )\r\n}\r\n\r\nexport default SignLogIn;"]},"metadata":{},"sourceType":"module"}