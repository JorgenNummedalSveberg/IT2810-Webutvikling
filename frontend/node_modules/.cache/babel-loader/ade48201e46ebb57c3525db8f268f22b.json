{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\prosjekt-4-jns\\\\frontend\\\\src\\\\Components\\\\ControlPanel\\\\RangeSlider.tsx\";\nimport React, { useRef } from 'react';\nimport { Paper, Slider } from '@material-ui/core';\nimport { useDispatch } from \"react-redux\";\nimport { setPage, setScore, setYears } from '../../actions';\nimport { makeStyles } from '@material-ui/styles';\nimport ImdbIcon from \"../Shared/ImdbIcon\";\nexport default function RangeSlider(props) {\n  // Value som setter verdien på slidern\n  const [value, setValue] = React.useState([props.score[0], props.score[1]]);\n  const [range] = React.useState([props.score[0], props.score[1]]); // Nødvendig for redux\n\n  const dispatch = useDispatch(); // Tom timeout ref som defineres først;\n\n  let timeoutRef = useRef(setTimeout(() => {}, 0)); // Når input endres tømmer vi den aktive timeouten og starter på nytt. Når der har gått 300ms, oppdater score range\n\n  function handleChange(e, data) {\n    clearTimeout(timeoutRef.current);\n    setValue(data);\n    timeoutRef.current = setTimeout(() => {\n      dispatch(setPage(0));\n\n      if (props.type === 'score') {\n        dispatch(setScore(data));\n      } else {\n        dispatch(setYears(data));\n      }\n    }, 300);\n  }\n\n  const classes = makeStyles({\n    slider: {\n      backgroundColor: '#E98074',\n      padding: '20px',\n      borderRadius: '10px'\n    },\n    sliderLabel: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    imdbLogo: {\n      marginTop: '20px'\n    }\n  });\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes().slider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    className: \"Slider\",\n    value: value,\n    onChange: handleChange,\n    valueLabelDisplay: \"auto\",\n    step: props.type === 'year' ? 5 : 0.5,\n    marks: true,\n    min: range[0],\n    max: range[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().sliderLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, props.type === 'year' ? /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, value[0]) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().imdbLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ImdbIcon, {\n    rating: value[0],\n    height: 25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 57\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, props.type === 'year' ? \"Year\" : \"Rating\"), props.type === 'year' ? /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, value[1]) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes().imdbLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ImdbIcon, {\n    rating: value[1],\n    height: 25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 57\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/webdev/prosjekt-4-jns/frontend/src/Components/ControlPanel/RangeSlider.tsx"],"names":["React","useRef","Paper","Slider","useDispatch","setPage","setScore","setYears","makeStyles","ImdbIcon","RangeSlider","props","value","setValue","useState","score","range","dispatch","timeoutRef","setTimeout","handleChange","e","data","clearTimeout","current","type","classes","slider","backgroundColor","padding","borderRadius","sliderLabel","display","justifyContent","imdbLogo","marginTop"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react';\r\nimport {Paper, Slider} from '@material-ui/core';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setPage, setScore, setYears} from '../../actions';\r\nimport {makeStyles} from '@material-ui/styles';\r\nimport ImdbIcon from \"../Shared/ImdbIcon\";\r\n\r\n\r\nexport default function RangeSlider(props: { score: number[], type: string }) {\r\n\r\n    // Value som setter verdien på slidern\r\n    const [value, setValue] = React.useState<number[]>([props.score[0], props.score[1]]);\r\n    const [range] = React.useState<number[]>([props.score[0], props.score[1]]);\r\n\r\n    // Nødvendig for redux\r\n    const dispatch = useDispatch();\r\n\r\n    // Tom timeout ref som defineres først;\r\n    let timeoutRef = useRef(setTimeout(() => {\r\n    }, 0));\r\n\r\n    // Når input endres tømmer vi den aktive timeouten og starter på nytt. Når der har gått 300ms, oppdater score range\r\n    function handleChange(e: any, data: number | number[]) {\r\n        clearTimeout(timeoutRef.current);\r\n        setValue(data as number[]);\r\n        timeoutRef.current = setTimeout(() => {\r\n            dispatch(setPage(0));\r\n            if (props.type === 'score') {\r\n                dispatch(setScore(data as number[]));\r\n            } else {\r\n                dispatch(setYears(data as number[]));\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    const classes = makeStyles({\r\n        slider: {\r\n            backgroundColor: '#E98074',\r\n            padding: '20px',\r\n            borderRadius: '10px'\r\n        },\r\n        sliderLabel: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between'\r\n        },\r\n        imdbLogo: {\r\n            marginTop: '20px'\r\n        }\r\n    })\r\n    return (\r\n        <Paper className={classes().slider}>\r\n            <Slider className=\"Slider\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={props.type === 'year' ? 5 : 0.5}\r\n                    marks\r\n                    min={range[0]}\r\n                    max={range[1]}\r\n            />\r\n            <div className={classes().sliderLabel}>\r\n                {props.type === 'year' ?\r\n                    <h3>{value[0]}</h3> :\r\n                    <div className={classes().imdbLogo}><ImdbIcon rating={value[0]} height={25}/></div>}\r\n                <h2>{props.type === 'year' ? \"Year\" : \"Rating\"}</h2>\r\n                {props.type === 'year' ?\r\n                    <h3>{value[1]}</h3> :\r\n                    <div className={classes().imdbLogo}><ImdbIcon rating={value[1]} height={25}/></div>}\r\n            </div>\r\n        </Paper>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}